/************************************************************************
* Light & powerful Dallas 1-Wire DS18B20 thermometer arduino library	*
* Designed specifically for	AlexGyver by Egor 'Nich1con' Zakharov		*
* V2.0 from 23.02.2020													*
************************************************************************/

#pragma once
#include <Arduino.h>

/*
Легкая и удобная в обращении arduino - библиотека для работы с 1-Wire термометрами DS18B20
> Возможность работы с несколькими датчиками на одном пине при использовании 8-битного уникального адреса
> Возможность работы с одним датчиком на пине без использования адресации
> Настраиваемое разрешение преобразования
> Проверка подлинности данных "на лету", с использованием CRC8 от Dallas [#define BME_CHECK_CRC]
> Рассчет CRC8 (~6 мкс) или чтение из таблицы (<1 мкс + 256 байт flash) [#define BME_CRC_USE_TABLE]
> Рассчет температуры как в целых числах, так и с плавающей точкой [#define BME_TEMP_TYPE float / int]
> Чтение уникального адреса подключенного термометра в указанный массив типа byte
*/


/*************************************************** Настройки ***************************************************/
#define BME_TEMP_TYPE float  	  // float/int - тип данных для рассчета температуры float / int <- (экономит flash, выполняется быстрее)
#define BME_CHECK_CRC true		  // true/false - проверка контрольной суммы принятых данных <- надежнее, но тратит немного больше flash
#define BME_CRC_USE_TABLE false   // true/false - использовать готовую таблицу контрольной суммы <- значительно быстрее, +256 байт flash

/************************************************* Класс **************************************************/
class MicroDS18B20 {
public:
	MicroDS18B20(uint8_t pin);              			// Создать обьект термометра без адресации
	MicroDS18B20(uint8_t pin, const uint8_t *address); 	// Создать обьект термометра с адресацией

	void setResolution(uint8_t resolution);       		// Установить разрешение термометра 9-12 бит
	void readAddress(uint8_t *addressArray);        	// Прочитать уникальный адрес термометра в массив

	void requestTemp(void);						// Запросить новое преобразование температуры
	BME_TEMP_TYPE getTemp(void);				// Прочитать значение температуры

private: 
	void addressRoutine(void);							// Процедура адресации / пропуска адресации
	uint8_t crc_update(uint8_t crc, uint8_t data);		// Обновление значения CRC8
	
	uint8_t _ds_pin;									// Пин термометра
	bool _ds_address_defined;							// Флаг - определен ли адрес?
	const uint8_t *_ds_address;							// Указатель на адрес термометра 
};